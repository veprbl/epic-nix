diff -aru a/src/DataFormats/GeometrySurface/interface/BoundSurface.h b/src/DataFormats/GeometrySurface/interface/BoundSurface.h
--- a/src/DataFormats/GeometrySurface/interface/BoundSurface.h	2012-02-23 04:23:00.000000000 -0500
+++ b/src/DataFormats/GeometrySurface/interface/BoundSurface.h	2022-08-05 14:01:20.000000000 -0400
@@ -31,7 +31,7 @@
       theBounds( iToCopy.theBounds->clone() ) {}
 
     const BoundSurface& operator=(const BoundSurface& iRHS ) {
-      theBounds = std::auto_ptr<Bounds>( iRHS.theBounds->clone() );
+      theBounds.reset(iRHS.theBounds->clone());
       return *this;
     }
 
@@ -39,7 +39,7 @@
 
 private:
   //own_ptr<Bounds,OwnerPolicy::Clone> theBounds;
-  std::auto_ptr<Bounds> theBounds;
+  std::unique_ptr<Bounds> theBounds;
 };
 
 
diff -aru a/src/DataFormats/GeometrySurface/src/BlockWipedAllocator.cc b/src/DataFormats/GeometrySurface/src/BlockWipedAllocator.cc
--- a/src/DataFormats/GeometrySurface/src/BlockWipedAllocator.cc	2012-02-23 04:23:00.000000000 -0500
+++ b/src/DataFormats/GeometrySurface/src/BlockWipedAllocator.cc	2022-08-05 13:52:42.000000000 -0400
@@ -58,7 +58,7 @@
 BlockWipedAllocator::Stat BlockWipedAllocator::stat() const {
   Stat s = { m_typeSize, m_blockSize, (*m_current).m_allocated,
 	     (&*(*m_current).m_data.end()-m_next)/m_typeSize,
-	     std::distance(const_iterator(m_current),m_blocks.end()),
+	     static_cast<size_t>(std::distance(const_iterator(m_current),m_blocks.end())),
 	     m_blocks.size(), m_alive};
   return s;
 }
@@ -120,7 +120,7 @@
   return (s_usePool) ? allocator(s).alloc() : ::operator new(s);
 }
 
-static void *  BlockWipedPoolAllocated::operator new(size_t s, void * p) {
+void *  BlockWipedPoolAllocated::operator new(size_t s, void * p) {
   return p;
 }
 
diff -aru a/src/DetectorDescription/Core/interface/adjgraph.h b/src/DetectorDescription/Core/interface/adjgraph.h
--- a/src/DetectorDescription/Core/interface/adjgraph.h	2012-02-23 04:23:04.000000000 -0500
+++ b/src/DetectorDescription/Core/interface/adjgraph.h	2022-08-05 14:06:18.000000000 -0400
@@ -16,6 +16,51 @@
 {
 
 public:
+  void dump_graph() const;  
+  // Graphtypes
+  
+  struct value_type {
+    value_type(const N & n, const E & e) : first(n), second(e) { }
+    const N & first;
+    const E & second;
+    N firstToValue() const { return first; }
+    E secondToValue() const { return second; }
+  };
+  
+  typedef std::vector<double>::size_type index_type;
+  
+  // (node-index target, edge)
+  typedef std::pair<index_type, index_type> edge_type;
+  
+  // (node-index -> node)
+  typedef std::vector<N> node_list;
+  typedef std::vector<E> edge_store;
+  
+  // (std::vector of edge_types for the adj_list)
+  typedef std::vector<edge_type> edge_list;
+
+  // (node-index -> edge_list) the adjacency-list
+  typedef std::vector<edge_list> adj_list;
+  typedef typename adj_list::iterator adj_iterator;
+  typedef typename adj_list::const_iterator const_adj_iterator;
+    
+  
+  // assigns a node-index to the node
+  typedef std::map<N, index_type> indexer_type;
+  typedef typename indexer_type::iterator indexer_iterator;
+  typedef typename indexer_type::const_iterator const_indexer_iterator;
+  
+  // supported iterators and ranges
+  typedef typename edge_list::iterator edge_iterator;
+  
+  typedef typename edge_list::const_iterator const_edge_iterator;
+  
+  typedef std::pair<edge_iterator,edge_iterator> edge_range;
+  
+  typedef std::pair<const_edge_iterator, const_edge_iterator> const_edge_range;
+
+  typedef std::pair<index_type, bool> index_result;  
+  
   class const_iterator
   {
     friend class graph<N,E>;
@@ -97,51 +142,6 @@
       }
   };
 
-  void dump_graph() const;  
-  // Graphtypes
-  
-  struct value_type {
-    value_type(const N & n, const E & e) : first(n), second(e) { }
-    const N & first;
-    const E & second;
-    N firstToValue() const { return first; }
-    E secondToValue() const { return second; }
-  };
-  
-  typedef std::vector<double>::size_type index_type;
-  
-  // (node-index target, edge)
-  typedef std::pair<index_type, index_type> edge_type;
-  
-  // (node-index -> node)
-  typedef std::vector<N> node_list;
-  typedef std::vector<E> edge_store;
-  
-  // (std::vector of edge_types for the adj_list)
-  typedef std::vector<edge_type> edge_list;
-
-  // (node-index -> edge_list) the adjacency-list
-  typedef std::vector<edge_list> adj_list;
-  typedef typename adj_list::iterator adj_iterator;
-  typedef typename adj_list::const_iterator const_adj_iterator;
-    
-  
-  // assigns a node-index to the node
-  typedef std::map<N, index_type> indexer_type;
-  typedef typename indexer_type::iterator indexer_iterator;
-  typedef typename indexer_type::const_iterator const_indexer_iterator;
-  
-  // supported iterators and ranges
-  typedef typename edge_list::iterator edge_iterator;
-  
-  typedef typename edge_list::const_iterator const_edge_iterator;
-  
-  typedef std::pair<edge_iterator,edge_iterator> edge_range;
-  
-  typedef std::pair<const_edge_iterator, const_edge_iterator> const_edge_range;
-
-  typedef std::pair<index_type, bool> index_result;  
-  
 public:
   // creation, deletion
   graph() : edges_(1)  { }
diff -aru a/src/ROOT/genvector/Math/GenVector/VectorUtil.h b/src/ROOT/genvector/Math/GenVector/VectorUtil.h
--- a/src/ROOT/genvector/Math/GenVector/VectorUtil.h	2012-02-23 04:23:05.000000000 -0500
+++ b/src/ROOT/genvector/Math/GenVector/VectorUtil.h	2022-08-05 13:47:21.000000000 -0400
@@ -291,9 +291,9 @@
       */
       template<class Vector, class RotationMatrix> 
       Vector Rotate(const Vector &v, const RotationMatrix & rot) { 
-	register double xX = v.X();
-	register double yY = v.Y();
-	register double zZ = v.Z();
+	double xX = v.X();
+	double yY = v.Y();
+	double zZ = v.Z();
 	double x2 =  rot(0,0)*xX + rot(0,1)*yY + rot(0,2)*zZ;
 	double y2 =  rot(1,0)*xX + rot(1,1)*yY + rot(1,2)*zZ;
 	double z2 =  rot(2,0)*xX + rot(2,1)*yY + rot(2,2)*zZ;
@@ -312,17 +312,17 @@
       */
       template <class LVector, class BoostVector> 
       LVector boost(const LVector & v, const BoostVector & b) { 
-        register double bx = b.X();
-        register double by = b.Y();
-        register double bz = b.Z();
+        double bx = b.X();
+        double by = b.Y();
+        double bz = b.Z();
 	double b2 = bx*bx + by*by + bz*bz;
 	if (b2 >= 1) {
            GenVector::Throw ( "Beta Vector supplied to set Boost represents speed >= c");
            return LVector();
 	}    
-	register double gamma = 1.0 / std::sqrt(1.0 - b2);
-	register double bp = bx*v.X() + by*v.Y() + bz*v.Z();
-	register double gamma2 = b2 > 0 ? (gamma - 1.0)/b2 : 0.0;
+	double gamma = 1.0 / std::sqrt(1.0 - b2);
+	double bp = bx*v.X() + by*v.Y() + bz*v.Z();
+	double gamma2 = b2 > 0 ? (gamma - 1.0)/b2 : 0.0;
 	double x2 = v.X() + gamma2*bp*bx + gamma*bx*v.T();
 	double y2 = v.Y() + gamma2*bp*by + gamma*by*v.T();
 	double z2 = v.Z() + gamma2*bp*bz + gamma*bz*v.T();
@@ -345,7 +345,7 @@
             GenVector::Throw ("Beta Vector supplied to set Boost represents speed >= c");
             return LVector();
          }    
-	register double gamma = 1.0/ std::sqrt(1.0 - beta*beta); 
+	double gamma = 1.0/ std::sqrt(1.0 - beta*beta); 
 	double x2 = gamma * v.X() + gamma * beta * v.T();
 	double t2 = gamma * beta * v.X() + gamma * v.T(); 
 	LVector lv; 
@@ -365,7 +365,7 @@
            GenVector::Throw ("Beta Vector supplied to set Boost represents speed >= c");
            return LVector();
 	}    
-	register double gamma = 1.0/ std::sqrt(1.0 - beta*beta); 
+	double gamma = 1.0/ std::sqrt(1.0 - beta*beta); 
 	double y2 = gamma * v.Y() + gamma * beta * v.T();
 	double t2 = gamma * beta * v.Y() + gamma * v.T(); 
 	LVector lv; 
@@ -385,7 +385,7 @@
            GenVector::Throw ( "Beta Vector supplied to set Boost represents speed >= c");
            return LVector();
 	}    
-	register double gamma = 1.0/ std::sqrt(1.0 - beta*beta); 
+	double gamma = 1.0/ std::sqrt(1.0 - beta*beta); 
 	double z2 = gamma * v.Z() + gamma * beta * v.T();
 	double t2 = gamma * beta * v.Z() + gamma * v.T(); 
 	LVector lv; 
diff -aru a/src/ROOT/smatrix/Math/MConfig.h b/src/ROOT/smatrix/Math/MConfig.h
--- a/src/ROOT/smatrix/Math/MConfig.h	2012-02-23 04:24:46.000000000 -0500
+++ b/src/ROOT/smatrix/Math/MConfig.h	2022-08-05 13:45:38.000000000 -0400
@@ -1,7 +1,7 @@
 // @(#)root/smatrix:$Id: MConfig.h 20882 2007-11-19 11:31:26Z rdm $
 // Authors: T. Glebe, L. Moneta    2005  
 
-#ifndef ROOT_Math_MConfig_
+#ifndef ROOT_Math_MConfig
 #define ROOT_Math_MConfig
 
 // for alpha streams 
diff -aru a/src/ROOT/smatrix/Math/MatrixInversion.icc b/src/ROOT/smatrix/Math/MatrixInversion.icc
--- a/src/ROOT/smatrix/Math/MatrixInversion.icc	2012-02-23 04:24:46.000000000 -0500
+++ b/src/ROOT/smatrix/Math/MatrixInversion.icc	2022-08-05 13:59:25.000000000 -0400
@@ -566,7 +566,7 @@
 
 
    double s31, s32;
-   register double s33, s34;
+   double s33, s34;
 
    mIter m11 = rhs.Array();
    mIter m12 = m11 + 1;
@@ -617,8 +617,8 @@
       //int j;
       for (unsigned j=1; j<=i;j++) {
          s33 = *mij;
-         register mIter mikj = mi + n + j - 1;
-         register mIter miik = mii + 1;
+         mIter mikj = mi + n + j - 1;
+         mIter miik = mii + 1;
          mIter min_end = mi + n;
          for (;miik<min_end;) {
             s33 += (*mikj) * (*(miik++));
diff -aru a/src/ROOT/smatrix/Math/StaticCheck.h b/src/ROOT/smatrix/Math/StaticCheck.h
--- a/src/ROOT/smatrix/Math/StaticCheck.h	2012-02-23 04:24:46.000000000 -0500
+++ b/src/ROOT/smatrix/Math/StaticCheck.h	2022-08-05 13:51:05.000000000 -0400
@@ -60,7 +60,7 @@
 ////////////////////////////////////////////////////////////////////////////////
 
 #define STATIC_CHECK(expr, msg) \
-    { ROOT::Math::CompileTimeError<((expr) != 0)> ERROR_##msg; (void)ERROR_##msg; } 
+    while (0) { if (!(expr)) { std::cerr << #msg << std::endl; std::terminate(); } }
 
 
 ////////////////////////////////////////////////////////////////////////////////
diff -aru a/src/RecoVertex/MultiVertexFit/interface/LinTrackCache.h b/src/RecoVertex/MultiVertexFit/interface/LinTrackCache.h
--- a/src/RecoVertex/MultiVertexFit/interface/LinTrackCache.h	2012-02-23 04:23:01.000000000 -0500
+++ b/src/RecoVertex/MultiVertexFit/interface/LinTrackCache.h	2022-08-05 11:00:07.000000000 -0400
@@ -17,7 +17,7 @@
 
   struct Vicinity
   {
-    bool operator() ( const GlobalPoint &, const GlobalPoint & );
+    bool operator() ( const GlobalPoint &, const GlobalPoint & ) const;
   };
 
 public:
diff -aru a/src/RecoVertex/MultiVertexFit/src/LinTrackCache.cc b/src/RecoVertex/MultiVertexFit/src/LinTrackCache.cc
--- a/src/RecoVertex/MultiVertexFit/src/LinTrackCache.cc	2012-02-23 04:23:01.000000000 -0500
+++ b/src/RecoVertex/MultiVertexFit/src/LinTrackCache.cc	2022-08-05 11:00:18.000000000 -0400
@@ -57,7 +57,7 @@
 }
 
 bool LinTrackCache::Vicinity::operator() ( const GlobalPoint & p1,
-                                           const GlobalPoint & p2 )
+                                           const GlobalPoint & p2 ) const
 {
   if ( (p1 - p2).mag() < maxRelinDistance() )
   {
diff -aru a/src/RecoVertex/VertexTools/src/DeterministicAnnealing.cc b/src/RecoVertex/VertexTools/src/DeterministicAnnealing.cc
--- a/src/RecoVertex/VertexTools/src/DeterministicAnnealing.cc	2012-02-23 04:23:02.000000000 -0500
+++ b/src/RecoVertex/VertexTools/src/DeterministicAnnealing.cc	2022-08-05 14:15:45.000000000 -0400
@@ -46,7 +46,7 @@
   */
   // return mphi / ( mphi + phi ( theChi2cut ) );
   long double newtmp = mphi / ( mphi + phi ( theChi2cut ) );
-  if ( !finite(newtmp ) )
+  if ( !std::isfinite(newtmp ) )
   {
     if ( chi2 < theChi2cut ) newtmp=1.;
     else newtmp=0.;
diff -aru a/src/RecoVertex/VertexTools/src/GeometricAnnealing.cc b/src/RecoVertex/VertexTools/src/GeometricAnnealing.cc
--- a/src/RecoVertex/VertexTools/src/GeometricAnnealing.cc	2012-02-23 04:23:02.000000000 -0500
+++ b/src/RecoVertex/VertexTools/src/GeometricAnnealing.cc	2022-08-05 14:16:02.000000000 -0400
@@ -17,7 +17,7 @@
 {
   double mphi = phi ( chi2 );
   long double newtmp = mphi / ( mphi + phi ( theChi2cut ) );
-  if ( !finite(newtmp ) )
+  if ( !std::isfinite(newtmp ) )
   {
     if ( chi2 < theChi2cut ) newtmp=1.;
     else newtmp=0.;
diff -aru a/src/RecoVertex/ZvresReco/src/vertex_lcfi/algo/inc/twotrackpid.h b/src/RecoVertex/ZvresReco/src/vertex_lcfi/algo/inc/twotrackpid.h
--- a/src/RecoVertex/ZvresReco/src/vertex_lcfi/algo/inc/twotrackpid.h	2012-02-23 04:23:00.000000000 -0500
+++ b/src/RecoVertex/ZvresReco/src/vertex_lcfi/algo/inc/twotrackpid.h	2022-08-05 13:45:08.000000000 -0400
@@ -15,7 +15,7 @@
 {
 	//Forward Declarations
 	class Jet;
-	class vertex_lcfi::Track;
+	class Track;
 	
 	//Enum for return type
 	enum PidCutType {Gamma, KShort};
diff -aru a/src/TrackingTools/GsfTools/interface/CloseComponentsMerger.icc b/src/TrackingTools/GsfTools/interface/CloseComponentsMerger.icc
--- a/src/TrackingTools/GsfTools/interface/CloseComponentsMerger.icc	2012-02-23 04:22:59.000000000 -0500
+++ b/src/TrackingTools/GsfTools/interface/CloseComponentsMerger.icc	2022-08-05 10:59:53.000000000 -0400
@@ -102,7 +102,7 @@
 // CloseComponentsMerger<N>::compWithMinDistToLargestWeight(SingleStateMap& unmergedComp) const {
   double large = DBL_MAX;
   double minDist = large;
-  typename SingleStateMap::iterator iterMinDist(0);
+  typename SingleStateMap::iterator iterMinDist;
   for (typename SingleStateMap::iterator it = unmergedComp.begin();
        it != unmergedComp.end(); it++) {
     if (it != unmergedComp.begin()) {
diff -aru a/src/TrackingTools/PatternTools/src/TwoTrackMinimumDistanceHelixHelix.cc b/src/TrackingTools/PatternTools/src/TwoTrackMinimumDistanceHelixHelix.cc
--- a/src/TrackingTools/PatternTools/src/TwoTrackMinimumDistanceHelixHelix.cc	2012-02-23 04:22:59.000000000 -0500
+++ b/src/TrackingTools/PatternTools/src/TwoTrackMinimumDistanceHelixHelix.cc	2022-08-05 13:57:35.000000000 -0400
@@ -1,3 +1,4 @@
+#include <cmath>
 #include "TrackingTools/PatternTools/interface/TwoTrackMinimumDistanceHelixHelix.h"
 #include "DataFormats/GeometryVector/interface/GlobalVector.h"
 #include "MagneticField/Engine/interface/MagneticField.h"
@@ -170,7 +171,7 @@
   double pH=0; double pG=0;
   do {
     retval=oneIteration ( pG, pH );
-    if ( !finite(pG) || !finite(pH) ) retval=true;
+    if ( !std::isfinite(pG) || !std::isfinite(pH) ) retval=true;
     if ( counter++>themaxiter ) retval=true;
   } while ( (!retval) && ( fabs(pG) > qual || fabs(pH) > qual ));
   if ( fabs ( theg * ( thepG - thepG0 ) ) > themaxjump ) retval=true;
